import tkinter as tk
from random import randint as rand

def move_player(event):
    """Move the player within the window boundaries."""
    move_x, move_y = 0, 0

    if event.keysym == "Up":
        move_y = -10
    elif event.keysym == "Down":
        move_y = 10
    elif event.keysym == "Left":
        move_x = -10
    elif event.keysym == "Right":
        move_x = 10

    # Get current player position
    x1, y1, x2, y2 = canvas.coords(player)

    # Calculate new position
    new_x1, new_y1 = x1 + move_x, y1 + move_y
    new_x2, new_y2 = x2 + move_x, y2 + move_y

    # Check boundaries
    if new_x1 < 0 or new_x2 > 800 or new_y1 < 0 or new_y2 > 400:
        return  # Don't move if it would go out of bounds

    canvas.move(player, move_x, move_y)


def update_game():
    """Update the position of balls and check for collisions."""
    global num_balls
    for i in range(num_balls):
        pos = canvas.coords(ball[i])
        
        # Bounce off walls
        if pos[3] > 400 or pos[1] < 0:
            y[i] = -y[i]
        if pos[0] < 0 or pos[2] > 800:
            x[i] = -x[i]

        canvas.move(ball[i], x[i], y[i])

        # Collision with player
        player_coords = canvas.coords(player)
        if pos[0] < player_coords[2] and pos[2] > player_coords[0] and pos[1] < player_coords[3] and pos[3] > player_coords[1]:
            end_game()
            return

    if num_balls > 0:
        canvas.after(30, update_game)

def add_ball():
    """Add a new ball to the canvas."""
    global num_balls
    color = rand(0, 3)
    x_pos = rand(10, 790)
    y_pos = rand(10, 390)
    diameter = rand(10, 30)
    xy = (x_pos, y_pos, x_pos + diameter, y_pos + diameter)
    ball.append(canvas.create_oval(xy, fill=colors[color]))
    x.append(rand(2, 4) * (-1 if rand(0, 1) else 1))
    y.append(rand(2, 4) * (-1 if rand(0, 1) else 1))
    num_balls += 1

def increase_balls():
    """Add a new ball every 30 seconds."""
    if num_balls > 0:
        add_ball()
        canvas.after(10000, increase_balls)

def increase_speed():
    """Increase the speed of all balls by 1% every 30 seconds."""
    if num_balls > 0:
        for i in range(len(x)):
            x[i] *= 1.01
            y[i] *= 1.01
        canvas.after(30000, increase_speed)  # Schedule next speed increase


def update_timer():
    """Update the survival time."""
    global time_survived
    if num_balls > 0:
        time_survived += 1
        canvas.itemconfig(timer_text, text=f"Time: {time_survived} s")
        canvas.after(1000, update_timer)

def end_game():
    """Handle game over state."""
    global num_balls
    num_balls = 0
    canvas.config(bg="white")
    canvas.create_text(400, 180, text="You Lose!", font=("Helvetica", 30), fill="red")
    canvas.create_text(400, 220, text=f"Time Survived: {time_survived} s", font=("Helvetica", 20), fill="black")

# === Tkinter Setup ===
window = tk.Tk()
window.title("Ball Game")

canvas = tk.Canvas(window, width=800, height=400, bg="black")
canvas.pack()

# Create player
player = canvas.create_oval(400, 200, 415, 215, fill="white")

# Display timer text
timer_text = canvas.create_text(60, 20, text="Time: 0 s", font=("Arial", 14), fill="white")

# Bind keys
window.bind("<Key>", move_player)

# Initialize ball data
num_balls = 5
ball = []
x = []
y = []
colors = ["red", "green", "yellow", "blue"]
time_survived = 0  # <-- Timer variable

# Create initial balls
for _ in range(num_balls):
    color = rand(0, 3)
    x_pos = rand(10, 790)
    y_pos = rand(10, 390)
    diameter = rand(10, 30)
    xy = (x_pos, y_pos, x_pos + diameter, y_pos + diameter)
    ball.append(canvas.create_oval(xy, fill=colors[color]))
    x.append(rand(2, 4) * (-1 if rand(0, 1) else 1))
    y.append(rand(2, 4) * (-1 if rand(0, 1) else 1))

# Start everything
update_game()
update_timer()
canvas.after(10000, increase_balls)

window.mainloop()
